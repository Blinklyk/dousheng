// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rpcComment/rpcComment.proto

package rpcComment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCCommentServiceClient is the client API for RPCCommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCCommentServiceClient interface {
	Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
}

type rPCCommentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCCommentServiceClient(cc grpc.ClientConnInterface) RPCCommentServiceClient {
	return &rPCCommentServiceClient{cc}
}

func (c *rPCCommentServiceClient) Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/rpcComment.RPCCommentService/Comment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCommentServiceClient) GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, "/rpcComment.RPCCommentService/GetCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCCommentServiceServer is the server API for RPCCommentService service.
// All implementations must embed UnimplementedRPCCommentServiceServer
// for forward compatibility
type RPCCommentServiceServer interface {
	Comment(context.Context, *CommentRequest) (*CommentResponse, error)
	GetCommentList(context.Context, *CommentListReq) (*CommentListResp, error)
	mustEmbedUnimplementedRPCCommentServiceServer()
}

// UnimplementedRPCCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRPCCommentServiceServer struct {
}

func (UnimplementedRPCCommentServiceServer) Comment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedRPCCommentServiceServer) GetCommentList(context.Context, *CommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedRPCCommentServiceServer) mustEmbedUnimplementedRPCCommentServiceServer() {}

// UnsafeRPCCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCCommentServiceServer will
// result in compilation errors.
type UnsafeRPCCommentServiceServer interface {
	mustEmbedUnimplementedRPCCommentServiceServer()
}

func RegisterRPCCommentServiceServer(s grpc.ServiceRegistrar, srv RPCCommentServiceServer) {
	s.RegisterService(&RPCCommentService_ServiceDesc, srv)
}

func _RPCCommentService_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCommentServiceServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcComment.RPCCommentService/Comment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCommentServiceServer).Comment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCommentService_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCommentServiceServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcComment.RPCCommentService/GetCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCommentServiceServer).GetCommentList(ctx, req.(*CommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCCommentService_ServiceDesc is the grpc.ServiceDesc for RPCCommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCCommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcComment.RPCCommentService",
	HandlerType: (*RPCCommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Comment",
			Handler:    _RPCCommentService_Comment_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _RPCCommentService_GetCommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcComment/rpcComment.proto",
}
