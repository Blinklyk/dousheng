// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rpcFavorite/rpcFavorite.proto

package rpcFavorite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCFavoriteServiceClient is the client API for RPCFavoriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFavoriteServiceClient interface {
	FavoriteAction(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*FavoriteResponse, error)
	FavoriteList(ctx context.Context, in *FavoriteListRequest, opts ...grpc.CallOption) (*FavoriteListResponse, error)
}

type rPCFavoriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFavoriteServiceClient(cc grpc.ClientConnInterface) RPCFavoriteServiceClient {
	return &rPCFavoriteServiceClient{cc}
}

func (c *rPCFavoriteServiceClient) FavoriteAction(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*FavoriteResponse, error) {
	out := new(FavoriteResponse)
	err := c.cc.Invoke(ctx, "/rpcVideo.RPCFavoriteService/FavoriteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFavoriteServiceClient) FavoriteList(ctx context.Context, in *FavoriteListRequest, opts ...grpc.CallOption) (*FavoriteListResponse, error) {
	out := new(FavoriteListResponse)
	err := c.cc.Invoke(ctx, "/rpcVideo.RPCFavoriteService/FavoriteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFavoriteServiceServer is the server API for RPCFavoriteService service.
// All implementations must embed UnimplementedRPCFavoriteServiceServer
// for forward compatibility
type RPCFavoriteServiceServer interface {
	FavoriteAction(context.Context, *FavoriteRequest) (*FavoriteResponse, error)
	FavoriteList(context.Context, *FavoriteListRequest) (*FavoriteListResponse, error)
	mustEmbedUnimplementedRPCFavoriteServiceServer()
}

// UnimplementedRPCFavoriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRPCFavoriteServiceServer struct {
}

func (UnimplementedRPCFavoriteServiceServer) FavoriteAction(context.Context, *FavoriteRequest) (*FavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteAction not implemented")
}
func (UnimplementedRPCFavoriteServiceServer) FavoriteList(context.Context, *FavoriteListRequest) (*FavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteList not implemented")
}
func (UnimplementedRPCFavoriteServiceServer) mustEmbedUnimplementedRPCFavoriteServiceServer() {}

// UnsafeRPCFavoriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFavoriteServiceServer will
// result in compilation errors.
type UnsafeRPCFavoriteServiceServer interface {
	mustEmbedUnimplementedRPCFavoriteServiceServer()
}

func RegisterRPCFavoriteServiceServer(s grpc.ServiceRegistrar, srv RPCFavoriteServiceServer) {
	s.RegisterService(&RPCFavoriteService_ServiceDesc, srv)
}

func _RPCFavoriteService_FavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFavoriteServiceServer).FavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcVideo.RPCFavoriteService/FavoriteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFavoriteServiceServer).FavoriteAction(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFavoriteService_FavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFavoriteServiceServer).FavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcVideo.RPCFavoriteService/FavoriteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFavoriteServiceServer).FavoriteList(ctx, req.(*FavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFavoriteService_ServiceDesc is the grpc.ServiceDesc for RPCFavoriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFavoriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcVideo.RPCFavoriteService",
	HandlerType: (*RPCFavoriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteAction",
			Handler:    _RPCFavoriteService_FavoriteAction_Handler,
		},
		{
			MethodName: "FavoriteList",
			Handler:    _RPCFavoriteService_FavoriteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcFavorite/rpcFavorite.proto",
}
