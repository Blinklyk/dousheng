// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rpcFollow/rpcFollow.proto

package rpcFollow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCFollowServiceClient is the client API for RPCFollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFollowServiceClient interface {
	FollowAction(ctx context.Context, in *FollowActionReq, opts ...grpc.CallOption) (*FollowActionResp, error)
	GetFollowList(ctx context.Context, in *FollowListReq, opts ...grpc.CallOption) (*FollowListResp, error)
	GetFollowerList(ctx context.Context, in *FollowerListReq, opts ...grpc.CallOption) (*FollowerListResp, error)
}

type rPCFollowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFollowServiceClient(cc grpc.ClientConnInterface) RPCFollowServiceClient {
	return &rPCFollowServiceClient{cc}
}

func (c *rPCFollowServiceClient) FollowAction(ctx context.Context, in *FollowActionReq, opts ...grpc.CallOption) (*FollowActionResp, error) {
	out := new(FollowActionResp)
	err := c.cc.Invoke(ctx, "/rpcFollow.RPCFollowService/FollowAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFollowServiceClient) GetFollowList(ctx context.Context, in *FollowListReq, opts ...grpc.CallOption) (*FollowListResp, error) {
	out := new(FollowListResp)
	err := c.cc.Invoke(ctx, "/rpcFollow.RPCFollowService/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFollowServiceClient) GetFollowerList(ctx context.Context, in *FollowerListReq, opts ...grpc.CallOption) (*FollowerListResp, error) {
	out := new(FollowerListResp)
	err := c.cc.Invoke(ctx, "/rpcFollow.RPCFollowService/GetFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFollowServiceServer is the server API for RPCFollowService service.
// All implementations must embed UnimplementedRPCFollowServiceServer
// for forward compatibility
type RPCFollowServiceServer interface {
	FollowAction(context.Context, *FollowActionReq) (*FollowActionResp, error)
	GetFollowList(context.Context, *FollowListReq) (*FollowListResp, error)
	GetFollowerList(context.Context, *FollowerListReq) (*FollowerListResp, error)
	mustEmbedUnimplementedRPCFollowServiceServer()
}

// UnimplementedRPCFollowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRPCFollowServiceServer struct {
}

func (UnimplementedRPCFollowServiceServer) FollowAction(context.Context, *FollowActionReq) (*FollowActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowAction not implemented")
}
func (UnimplementedRPCFollowServiceServer) GetFollowList(context.Context, *FollowListReq) (*FollowListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedRPCFollowServiceServer) GetFollowerList(context.Context, *FollowerListReq) (*FollowerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (UnimplementedRPCFollowServiceServer) mustEmbedUnimplementedRPCFollowServiceServer() {}

// UnsafeRPCFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFollowServiceServer will
// result in compilation errors.
type UnsafeRPCFollowServiceServer interface {
	mustEmbedUnimplementedRPCFollowServiceServer()
}

func RegisterRPCFollowServiceServer(s grpc.ServiceRegistrar, srv RPCFollowServiceServer) {
	s.RegisterService(&RPCFollowService_ServiceDesc, srv)
}

func _RPCFollowService_FollowAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFollowServiceServer).FollowAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcFollow.RPCFollowService/FollowAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFollowServiceServer).FollowAction(ctx, req.(*FollowActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFollowService_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFollowServiceServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcFollow.RPCFollowService/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFollowServiceServer).GetFollowList(ctx, req.(*FollowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFollowService_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFollowServiceServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcFollow.RPCFollowService/GetFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFollowServiceServer).GetFollowerList(ctx, req.(*FollowerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFollowService_ServiceDesc is the grpc.ServiceDesc for RPCFollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcFollow.RPCFollowService",
	HandlerType: (*RPCFollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowAction",
			Handler:    _RPCFollowService_FollowAction_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _RPCFollowService_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _RPCFollowService_GetFollowerList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcFollow/rpcFollow.proto",
}
