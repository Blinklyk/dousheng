// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rpcVideo/rpcVideo.proto

package rpcVideo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCVideoServiceClient is the client API for RPCVideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCVideoServiceClient interface {
	GetPublishList(ctx context.Context, in *PublishListRequest, opts ...grpc.CallOption) (*PublishListResponse, error)
	Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
}

type rPCVideoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCVideoServiceClient(cc grpc.ClientConnInterface) RPCVideoServiceClient {
	return &rPCVideoServiceClient{cc}
}

func (c *rPCVideoServiceClient) GetPublishList(ctx context.Context, in *PublishListRequest, opts ...grpc.CallOption) (*PublishListResponse, error) {
	out := new(PublishListResponse)
	err := c.cc.Invoke(ctx, "/rpcVideo.RPCVideoService/GetPublishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVideoServiceClient) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	out := new(FeedResp)
	err := c.cc.Invoke(ctx, "/rpcVideo.RPCVideoService/Feed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCVideoServiceServer is the server API for RPCVideoService service.
// All implementations must embed UnimplementedRPCVideoServiceServer
// for forward compatibility
type RPCVideoServiceServer interface {
	GetPublishList(context.Context, *PublishListRequest) (*PublishListResponse, error)
	Feed(context.Context, *FeedReq) (*FeedResp, error)
	mustEmbedUnimplementedRPCVideoServiceServer()
}

// UnimplementedRPCVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRPCVideoServiceServer struct {
}

func (UnimplementedRPCVideoServiceServer) GetPublishList(context.Context, *PublishListRequest) (*PublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishList not implemented")
}
func (UnimplementedRPCVideoServiceServer) Feed(context.Context, *FeedReq) (*FeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedRPCVideoServiceServer) mustEmbedUnimplementedRPCVideoServiceServer() {}

// UnsafeRPCVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCVideoServiceServer will
// result in compilation errors.
type UnsafeRPCVideoServiceServer interface {
	mustEmbedUnimplementedRPCVideoServiceServer()
}

func RegisterRPCVideoServiceServer(s grpc.ServiceRegistrar, srv RPCVideoServiceServer) {
	s.RegisterService(&RPCVideoService_ServiceDesc, srv)
}

func _RPCVideoService_GetPublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVideoServiceServer).GetPublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcVideo.RPCVideoService/GetPublishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVideoServiceServer).GetPublishList(ctx, req.(*PublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVideoService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVideoServiceServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcVideo.RPCVideoService/Feed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVideoServiceServer).Feed(ctx, req.(*FeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCVideoService_ServiceDesc is the grpc.ServiceDesc for RPCVideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCVideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcVideo.RPCVideoService",
	HandlerType: (*RPCVideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublishList",
			Handler:    _RPCVideoService_GetPublishList_Handler,
		},
		{
			MethodName: "Feed",
			Handler:    _RPCVideoService_Feed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcVideo/rpcVideo.proto",
}
